@Library('Jenkins_shared_Library') _

pipeline{

    agent any

    parameters{

        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/Destroy')
        string(name: 'aws_account_id', description: " AWS Account ID", defaultValue: '448508025022')
        string(name: 'Region', description: "Region of ECR", defaultValue: 'sa-east-1')
        string(name: 'ECR_REPO_NAME', description: "name of the ECR", defaultValue: 'abhiayan')
    }
    stages{
         
        stage('Git Checkout'){
                    when { expression {  params.action == 'create' } }
            steps{
            gitCheckout(
                branch: "main",
                url: "https://github.com/01AT/Jenkins-CICD.git"
            )
            }
        }
        stage('Unit Test Maven'){
            when{ expression { params.action == 'create'}}    
            steps{
                script{
                    mvntest()
                }

            }
        }
        stage('Maven Integration Test'){
            when{ expression { params.action == 'create'}}
            steps{
                script{
                    mvnIntegrationTest()
                }

            }
        }
        stage('Static Code Analysis'){
            when{ expression { params.action == 'create'}}
            steps{
                script{
                    def SonarQubeCredentialsId = 'sonarqube-api'
                    staticcodeanalysis(SonarQubeCredentialsId)
                }

            }
        }
        stage('Quality Gate Status Check : SonarQube'){
            when{ expression { params.action == 'create'}}
            steps{
                script{
                    def SonarQubeCredentialsId = 'sonarqube-api'
                    QualityGateStatus(SonarQubeCredentialsId)
                }

            }
        }
        stage('maven build'){
            when{ expression { params.action == 'create'}}
            steps{
                script{
                    mavenbuild()
                }

            }
        }
        stage('Docker Image Build : ECR'){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerbuild("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
    stage('Docker Image Scan: trivy '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerscanimage("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }
        stage('Docker Image Push : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerimagepush("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }   
        stage('Docker Image Cleanup : ECR '){
         when { expression {  params.action == 'create' } }
            steps{
               script{
                   
                   dockerimagecleanup("${params.aws_account_id}","${params.Region}","${params.ECR_REPO_NAME}")
               }
            }
        }  
    }
}
